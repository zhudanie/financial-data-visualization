<<<<<<< HEAD
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
), # Distributions
tabPanel("Industry Visualizations", plotOutput("facetedplot")), # Industry facet
tabPanel("Financial Visualizations",
br(),
br(),
plotOutput("income_financials"),
br(),
br(),
br(),
br(),
plotOutput("esg_profitmargin")), # Financial data plots
tabPanel("3D Heat Map", rglwidgetOutput("threed_plot",  width = 800, height = 600)),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')), # Data as datatable
id = "tabset"
),
id = "main"
)
))
# SERVER
server <- function(input, output) {
observeEvent(input[["tabset"]], {
if(input[["tabset"]] == "Financial Visualizations" | input[["tabset"]] == "3D Heat Map"){
hideElement(selector = "#sidebar")
removeCssClass("main", "col-sm-8")
addCssClass("main", "col-sm-12")
}else{
showElement(selector = "#sidebar")
removeCssClass("main", "col-sm-12")
addCssClass("main", "col-sm-8")
}})
# Regression output
output$summary <- renderPrint({
fit <- lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(compositeAugust, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(compositeAugust[,input$indepvar], compositeAugust[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar]), col="red")
lines(lowess(compositeAugust[,input$indepvar],compositeAugust[,input$outcome]), col="blue")
}, height=400)
# Industry visualization output
output$facetedplot <- renderPlot({
ggplot(composite_total2, aes(composite_total2[,input$indepvar], composite_total2[,input$outcome])) + geom_hex() + facet_wrap(~ Sector, ncol=4) + labs(y = input$outcome, x = input$indepvar)}, res = 96)
# Financial data output
output$income_financials <- renderPlot({
ggplot(income_statements, aes(x=Income, y=Sector)) +
geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=.04) +
scale_x_continuous(breaks=seq(0,100000000000,10000000000)) +
labs(x="Income (USD)") +
theme_minimal() +
ggtitle("Plot of Income by Sector") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
output$esg_profitmargin <- renderPlot({
ggplot(income_statements, aes(x=`ESG Totalesg`, y=`Profit Margin`, color=Sector)) +
geom_point(shape = 16, size = 4, alpha = .4) +
labs(x="ESG Score")+
theme_minimal() +
ggtitle("Plot of Profit Margin by ESG Score") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
industry_facet <- reactive({
ggplot(composite_total2) +
stat_density_2d(aes(x = composite_total2[,"Price_diff"], y = composite_total2[,"Price"],
fill = stat(nlevel)), geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(Sector~.) + scale_fill_viridis_c(option = "A") +
labs(x="Price Difference", y="Price")
})
# 3D data output
output$threed_plot <- renderRglwidget({
plot_gg(industry_facet(), width = 5, height = 5, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30)
rglwidget()
})
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(compositeAugust[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(compositeAugust[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
compositeAugust <- as.data.frame(read_csv("compositeAugust.csv"))
=======
library(tidyverse)
read_xlsx("~/Exp-Backup 2021_08_01.xlsx")
install.packages("readxl")
library(readxl)
yo <- read_xlsx("~/Exp-Backup 2021_08_01.xlsx")
install.packages("readxl")
install.packages("readxl")
library(readxl)
yo <- read_xlsx("~/Exp-Backup 2021_08_01.xlsx")
#install.packages("readxl")
library(readxl)
yo <- read_xlsx("~/Exp-Backup 2021_08_01.xlsx")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("readxl")
library(readxl)
yo <- read_xlsx("~/Exp-Backup 2021_08_01.xlsx")
library(readxl)
Exp_Backup_2021_08_01 <- read_excel("stock_data/Exp-Backup 2021_08_01.xlsx")
library(readxl)
Exp_Backup_2021_08_01 <- read_excel("stock_data/Exp-Backup 2021_08_01.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
df1 <- read_excel("stock_data/Exp-Backup 2021_08_01.xlsx")
colnames(df1) <- paste("day1", colnames(df1) - "Ticker", sep = "_")
df2 <- read_excel("stock_data/Exp-Backup 2021_08_02.xlsx")
Master <- cbind(df1, df2)
Master <- rbind(df1, df2)
library(tidyverse)
library(readxl)
library(dplyr)
Master <- rbind(df1, df2)
Master <- cbind(df1, df2)
Master <- rbind(df1, df2)
View(df1)
View(df2)
df1 <- rename(df1, Date = `Set - 6 Errors`)
df2 <- rename(df2, Date = `Set - 19 Errors`)
Master <- rbind(df1, df2)
View(Master)
View(Master)
Master2 <- pivot_wider(Master, names_from = Date, values_from = Price)
View(Master2)
names(df1) <- c("date", "Ticker")
library(tidyverse)
library(readxl)
library(dplyr)
df1 <- read_excel("stock_data/Exp-Backup 2021_08_01.xlsx")
colnames(df1) <- paste("day1", colnames(df1), sep = "_")
df2 <- read_excel("stock_data/Exp-Backup 2021_08_02.xlsx")
colnames(df2) <- paste("day2", colnames(df2), sep = "_")
names(df1) <- c("date", "Ticker")
names(df1)[names(df1) == "day1_Ticker"] <- "Ticker"
df1 <- read_excel("stock_data/Exp-Backup 2021_08_01.xlsx")
colnames(df1) <- paste("day1", colnames(df1), sep = "_")
names(df1)[names(df1) == "day1_Ticker"] <- "Ticker"
view(df1)
knitr::opts_chunk$set(echo = TRUE)
>>>>>>> e0fbe0dcf34c6a351497429bc610aa7aa26fdf02
library(tidyverse)
library(readxl)
library(dplyr)
library(fs)
library(readr)
library(shiny)
library(shinyjs)
library(rgdal)
library(rayshader)
library(knitr)
library(magrittr)
library(pxR)
library(RColorBrewer)
library(rgeos)
library(magick)
library(rgl)
options(RGL_USE_NULL = TRUE)
#install.packages("devtools")
#devtools::install_github("tylermorganwall/rayshader")
library(tidyverse)
library(readxl)
library(dplyr)
library(fs)
library(readr)
library(shiny)
library(shinyjs)
library(rgdal)
library(rayshader)
library(knitr)
library(magrittr)
library(pxR)
library(RColorBrewer)
library(rgeos)
library(magick)
options(RGL_USE_NULL = TRUE)
library(rgl)
#install.packages("devtools")
#devtools::install_github("tylermorganwall/rayshader")
compositeAugust <- as.data.frame(read_csv("compositeAugust.csv"))
compositeAugust$Date <- NULL
composite_total2 <- as.data.frame(read_csv("composite_total2.csv"))
composite_total2 <- subset(composite_total2, Price_diff > -500 & Price_diff < 500 & Price < 1000)
income_statements <- as.data.frame(read_csv("income_statements.csv"))
ui <- fluidPage(
useShinyjs(),
titlePanel("Regression Model (Dataset: compositeAugust)"),
sidebarLayout(
sidebarPanel(
id="sidebar",
selectInput("outcome", label = h3("Outcome"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
), # Distributions
tabPanel("Industry Visualizations", plotOutput("facetedplot")), # Industry facet
tabPanel("Financial Visualizations",
br(),
br(),
plotOutput("income_financials"),
br(),
br(),
br(),
br(),
plotOutput("esg_profitmargin")), # Financial data plots
tabPanel("3D Heat Map", rglwidgetOutput("threed_plot",  width = 800, height = 600)),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')), # Data as datatable
id = "tabset"
),
id = "main"
)
))
# SERVER
server <- function(input, output) {
observeEvent(input[["tabset"]], {
if(input[["tabset"]] == "Financial Visualizations" | input[["tabset"]] == "3D Heat Map"){
hideElement(selector = "#sidebar")
removeCssClass("main", "col-sm-8")
addCssClass("main", "col-sm-12")
}else{
showElement(selector = "#sidebar")
removeCssClass("main", "col-sm-12")
addCssClass("main", "col-sm-8")
}})
# Regression output
output$summary <- renderPrint({
fit <- lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(compositeAugust, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(compositeAugust[,input$indepvar], compositeAugust[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar]), col="red")
lines(lowess(compositeAugust[,input$indepvar],compositeAugust[,input$outcome]), col="blue")
}, height=400)
# Industry visualization output
output$facetedplot <- renderPlot({
ggplot(composite_total2, aes(composite_total2[,input$indepvar], composite_total2[,input$outcome])) + geom_hex() + facet_wrap(~ Sector, ncol=4) + labs(y = input$outcome, x = input$indepvar)}, res = 96)
# Financial data output
output$income_financials <- renderPlot({
ggplot(income_statements, aes(x=Income, y=Sector)) +
geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=.04) +
scale_x_continuous(breaks=seq(0,100000000000,10000000000)) +
labs(x="Income (USD)") +
theme_minimal() +
ggtitle("Plot of Income by Sector") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
output$esg_profitmargin <- renderPlot({
ggplot(income_statements, aes(x=`ESG Totalesg`, y=`Profit Margin`, color=Sector)) +
geom_point(shape = 16, size = 4, alpha = .4) +
labs(x="ESG Score")+
theme_minimal() +
ggtitle("Plot of Profit Margin by ESG Score") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
industry_facet <- reactive({
ggplot(composite_total2) +
stat_density_2d(aes(x = composite_total2[,"Price_diff"], y = composite_total2[,"Price"],
fill = stat(nlevel)), geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(Sector~.) + scale_fill_viridis_c(option = "A") +
labs(x="Price Difference", y="Price")
})
# 3D data output
output$threed_plot <- renderRglwidget({
plot_gg(industry_facet(), width = 8, height = 8, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30)
rglwidget()
})
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(compositeAugust[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(compositeAugust[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
}
shinyApp(ui = ui, server = server)
compositeAugust <- as.data.frame(read_csv("compositeAugust.csv"))
compositeAugust$Date <- NULL
composite_total2 <- as.data.frame(read_csv("composite_total2.csv"))
composite_total2 <- subset(composite_total2, Price_diff > -500 & Price_diff < 500 & Price < 1000)
income_statements <- as.data.frame(read_csv("income_statements.csv"))
ui <- fluidPage(
useShinyjs(),
titlePanel("Regression Model (Dataset: compositeAugust)"),
sidebarLayout(
sidebarPanel(
id="sidebar",
selectInput("outcome", label = h3("Outcome"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
), # Distributions
tabPanel("Industry Visualizations", plotOutput("facetedplot")), # Industry facet
tabPanel("Financial Visualizations",
br(),
br(),
plotOutput("income_financials"),
br(),
br(),
br(),
br(),
plotOutput("esg_profitmargin")), # Financial data plots
tabPanel("3D Heat Map", rglwidgetOutput("threed_plot",  width = 800, height = 600)),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')), # Data as datatable
id = "tabset"
),
id = "main"
)
))
# SERVER
server <- function(input, output) {
observeEvent(input[["tabset"]], {
if(input[["tabset"]] == "Financial Visualizations" | input[["tabset"]] == "3D Heat Map"){
hideElement(selector = "#sidebar")
removeCssClass("main", "col-sm-8")
addCssClass("main", "col-sm-12")
}else{
showElement(selector = "#sidebar")
removeCssClass("main", "col-sm-12")
addCssClass("main", "col-sm-8")
}})
# Regression output
output$summary <- renderPrint({
fit <- lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(compositeAugust, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(compositeAugust[,input$indepvar], compositeAugust[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar]), col="red")
lines(lowess(compositeAugust[,input$indepvar],compositeAugust[,input$outcome]), col="blue")
}, height=400)
# Industry visualization output
output$facetedplot <- renderPlot({
ggplot(composite_total2, aes(composite_total2[,input$indepvar], composite_total2[,input$outcome])) + geom_hex() + facet_wrap(~ Sector, ncol=4) + labs(y = input$outcome, x = input$indepvar)}, res = 96)
# Financial data output
output$income_financials <- renderPlot({
ggplot(income_statements, aes(x=Income, y=Sector)) +
geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=.04) +
scale_x_continuous(breaks=seq(0,100000000000,10000000000)) +
labs(x="Income (USD)") +
theme_minimal() +
ggtitle("Plot of Income by Sector") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
output$esg_profitmargin <- renderPlot({
ggplot(income_statements, aes(x=`ESG Totalesg`, y=`Profit Margin`, color=Sector)) +
geom_point(shape = 16, size = 4, alpha = .4) +
labs(x="ESG Score")+
theme_minimal() +
ggtitle("Plot of Profit Margin by ESG Score") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
industry_facet <- reactive({
ggplot(composite_total2) +
stat_density_2d(aes(x = composite_total2[,"Price_diff"], y = composite_total2[,"Price"],
fill = stat(nlevel)), geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(Sector~.) + scale_fill_viridis_c(option = "A") +
labs(x="Price Difference", y="Price")
})
# 3D data output
output$threed_plot <- renderRglwidget({
plot_gg(industry_facet(), width = 8, height = 8, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30)
rglwidget()
})
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(compositeAugust[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(compositeAugust[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
}
shinyApp(ui = ui, server = server)
compositeAugust <- as.data.frame(read_csv("compositeAugust.csv"))
compositeAugust$Date <- NULL
composite_total2 <- as.data.frame(read_csv("composite_total2.csv"))
composite_total2 <- subset(composite_total2, Price_diff > -500 & Price_diff < 500 & Price < 1000)
income_statements <- as.data.frame(read_csv("income_statements.csv"))
ui <- fluidPage(
useShinyjs(),
titlePanel("Regression Model (Dataset: compositeAugust)"),
sidebarLayout(
sidebarPanel(
id="sidebar",
selectInput("outcome", label = h3("Outcome"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
), # Distributions
tabPanel("Industry Visualizations", plotOutput("facetedplot")), # Industry facet
tabPanel("Financial Visualizations",
br(),
br(),
plotOutput("income_financials"),
br(),
br(),
br(),
br(),
plotOutput("esg_profitmargin")), # Financial data plots
tabPanel("3D Heat Map", rglwidgetOutput("threed_plot",  width = 800, height = 600)),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')), # Data as datatable
id = "tabset"
),
id = "main"
)
))
# SERVER
server <- function(input, output) {
observeEvent(input[["tabset"]], {
if(input[["tabset"]] == "Financial Visualizations" | input[["tabset"]] == "3D Heat Map"){
hideElement(selector = "#sidebar")
removeCssClass("main", "col-sm-8")
addCssClass("main", "col-sm-12")
}else{
showElement(selector = "#sidebar")
removeCssClass("main", "col-sm-12")
addCssClass("main", "col-sm-8")
}})
# Regression output
output$summary <- renderPrint({
fit <- lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(compositeAugust, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(compositeAugust[,input$indepvar], compositeAugust[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar]), col="red")
lines(lowess(compositeAugust[,input$indepvar],compositeAugust[,input$outcome]), col="blue")
}, height=400)
# Industry visualization output
output$facetedplot <- renderPlot({
ggplot(composite_total2, aes(composite_total2[,input$indepvar], composite_total2[,input$outcome])) + geom_hex() + facet_wrap(~ Sector, ncol=4) + labs(y = input$outcome, x = input$indepvar)}, res = 96)
# Financial data output
output$income_financials <- renderPlot({
ggplot(income_statements, aes(x=Income, y=Sector)) +
geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=.04) +
scale_x_continuous(breaks=seq(0,100000000000,10000000000)) +
labs(x="Income (USD)") +
theme_minimal() +
ggtitle("Plot of Income by Sector") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
output$esg_profitmargin <- renderPlot({
ggplot(income_statements, aes(x=`ESG Totalesg`, y=`Profit Margin`, color=Sector)) +
geom_point(shape = 16, size = 4, alpha = .4) +
labs(x="ESG Score")+
theme_minimal() +
ggtitle("Plot of Profit Margin by ESG Score") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
})
industry_facet <- reactive({
ggplot(composite_total2) +
stat_density_2d(aes(x = composite_total2[,"Price_diff"], y = composite_total2[,"Price"],
fill = stat(nlevel)), geom = "polygon", n = 200, bins = 50,contour = TRUE) +
facet_wrap(Sector~.) + scale_fill_viridis_c(option = "A") +
labs(x="Price Difference", y="Price")
})
# 3D data output
output$threed_plot <- renderRglwidget({
plot_gg(industry_facet(), width = 7, height = 7, multicore = TRUE, scale = 250,
zoom = 0.7, theta = 10, phi = 30)
rglwidget()
})
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(compositeAugust[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(compositeAugust[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
}
<<<<<<< HEAD
=======
file_paths <- fs::dir_ls("stock_data")
file_paths
# Setting up the master file
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
for (i in seq_along(file_paths)[-1]) {
df1 <- read_excel(file_paths[i])
df1 <- df1[-c(3:19, 42:73)] %>%
filter(composite$Ticker == "AAPL")
composite <- full_join(composite, df1)
}
df1 <- read_excel(file_paths[2])
df1 <- df1[-c(3:19, 42:73)] %>%
filter(composite$Ticker == "AAPL")
df1
view(df1)
df1 <- df1[-c(3:19, 42:73)] %>%
filter(df1$Ticker == "AAPL")
composite <- full_join(composite, df1)
view(composite)
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
df1 <- read_excel(file_paths[2])
df1 <- df1[-c(3:19, 42:73)] %>%
filter(df1$Ticker == "AAPL")
composite <- full_join(composite, df1)
view(composite)
composite <- colnames(c(Date))
composite <- colnames(c("Date"))
view(composite)
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
composite <- colnames(c("Date"))
view(composite)
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
composite <- colnames(c("Date"))
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
colnames(composite) <- c("Date")
View(composite)
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
colnames(composite)[1] <- c("Date")
View(composite)
file_paths <- fs::dir_ls("stock_data")
file_paths
# Setting up the master file
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
colnames(composite)[1] <- c("Date")
for (i in seq_along(file_paths)[-1]) {
df1 <- read_excel(file_paths[i])
df1 <- df1[-c(3:19, 42:73)] %>%
filter(df1$Ticker == "AAPL")
colnames(df1)[1] <- c("Date")
composite <- full_join(composite, df1)
}
View(composite)
View(composite)
View(composite)
write_excel_csv(composite, "newdata.csv")
ggplot(data=df2, aes(x=dose, y=len, group=supp)) +
geom_line()+
geom_point()
ggplot(data=composite, aes(x=price, y=date, group=supp)) +
geom_line()+
geom_point()
ggplot(data=composite, aes(x=Price, y=Date, group=supp)) +
geom_line()+
geom_point()
ggplot(data=composite, aes(x=Price, y=Date)) +
geom_line()+
geom_point()
ggplot(data=composite, aes(x=Date, y=Price)) +
geom_line()+
geom_point()
df1 %>% %>% mutate(index=1:n())
df1 %>% mutate(index=1:n())
ggplot(data=composite, aes(x=Date, y=index)) +
geom_line()
composite %>% mutate(index=1:n())
ggplot(data=composite, aes(x=Date, y=index)) +
geom_line()
composite %>% mutate(index=1:n())
ggplot(data=composite, aes(x=Date, y=index)) +
geom_line()
composite <- composite %>% mutate(index=1:n())
ggplot(data=composite, aes(x=Date, y=index)) +
geom_line()
view(composite)
ggplot(data=composite, aes(x=index, y=Price)) +
geom_line()
ggplot() +
geom_line(data=composite, aes(x=index, y=Price)) +
geom_line(data=composite, aes(x=index, y="P/E"))
ggplot() +
geom_line(data=composite, aes(x=index, y=Price)) +
geom_line(data=composite, aes(x=index, y='P/E'))
ggplot(data=composite, aes(x=index, y=Price)) +
geom_line(data=composite, aes(x=index, y='P/E'))
knitr::opts_chunk$set(echo = TRUE)
ile_paths <- fs::dir_ls("stock_data")
file_paths
brary(tidyverse)
library(tidyverse)
library(readxl)
library(dplyr)
library(fs)
file_paths <- fs::dir_ls("stock_data")
file_paths
file_paths <- fs::dir_ls("stock_data")
file_paths
# Setting up the master file
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
colnames(composite)[1] <- c("Date")
for (i in seq_along(file_paths)[-1]) {
df1 <- read_excel(file_paths[i])
df1 <- df1[-c(3:19, 42:73)] %>%
filter(df1$Ticker == "AAPL")
colnames(df1)[1] <- c("Date")
composite <- full_join(composite, df1)
}
view(composite)
columns <- colnames(composite)
for (col in columns){
difference <- diff(composite$col)
}
price_difference <- diff(composite$price)
price_difference <- diff(composite$Price)
price_difference
composite %>%
mutate_all(funs(. - lag(.))) %>%
na.omit()
composite[3:36] %>%
mutate_all(funs(. - lag(.))) %>%
na.omit()
for (col in columns){
composite <- mutate(composite, cbind(col, "_diff") = col - lag(col))
for (col in columns){
df <- composite %>% mutate(cbind(col, "_diff") = col - lag(col))
composite %>% mutate(price_diff = Price - lag(Price))
view(composite)
df <- composite %>% mutate(price_diff = Price - lag(Price))
df
view(df)
df <- composite %>% mutate((cbind(col, "_diff")) = col - lag(col))
}
for (col in columns){
df <- composite %>% mutate(diff = col - lag(col))
}
for (col in columns){
print(col)
}
df <- composite %>% mutate(diff = col - lag(col))
for (col in columns){
df <- composite %>% mutate(paste(col, "_diff") = col - lag(col))
for (col in columns){
paste(col, "_diff")
}
for (col in columns){
print(paste(col, "_diff"))
}
for (col in columns){
print(paste(col, "diff"))
}
knitr::opts_chunk$set(echo = TRUE)
file_paths
file_paths <- fs::dir_ls("stock_data")
file_paths
# Setting up the master file
composite <- read_excel(file_paths[1])
library(tidyverse)
library(readxl)
library(dplyr)
library(fs)
file_paths <- fs::dir_ls("stock_data")
file_paths
# Setting up the master file
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 42:73)] %>% filter(composite$Ticker == "AAPL")
colnames(composite)[1] <- c("Date")
for (i in seq_along(file_paths)[-1]) {
df1 <- read_excel(file_paths[i])
df1 <- df1[-c(3:19, 42:73)] %>%
filter(df1$Ticker == "AAPL")
colnames(df1)[1] <- c("Date")
composite <- full_join(composite, df1)
}
view(composite)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(dplyr)
library(fs)
file_paths <- fs::dir_ls("stock_data")
file_paths
# Setting up the master file
composite <- read_excel(file_paths[1])
# Drop information that is not needed (doesn't change day-to-day)
composite <- composite[-c(3:19, 76, 42:73)] %>% filter(composite$Ticker == "AAPL")
colnames(composite)[1] <- c("Date")
view(composite)
colnames(composite)[1] <- c("Date")
for (i in seq_along(file_paths)[-1]) {
df1 <- read_excel(file_paths[i])
df1 <- df1[-c(3:19, 76, 42:73)] %>%
filter(df1$Ticker == "AAPL")
colnames(df1)[1] <- c("Date")
composite <- full_join(composite, df1)
}
write_csv(composite, "compositeAugust.csv")
columns <- colnames(composite)[3:35]
columns <- colnames(composite)[3:35]
for (col in columns){
composite[, col] <- as.numeric(unlist(composite[, col]))
for(row in 2:nrow(composite)){
composite[row, paste0(col, "_diff")] <- composite[row, col] - composite[row - 1, col]
}
}
write_csv(composite, "compositeAugust.csv")
view(composite)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
compositeAugust <- as.data.frame(read_csv("compositeAugust_5daylag.csv"))
library(tidyverse)
library(readxl)
library(dplyr)
library(fs)
library(readr)
library(shiny)
compositeAugust <- as.data.frame(read_csv("compositeAugust_5daylag.csv"))
compositeAugust$Date <- NULL
ui <- fluidPage(
titlePanel("Regression Model (Dataset: compositeAugust)"),
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list("SMA20" = "SMA20",
"Price" = "Price",
"ATR" = "ATR",
"SMA20_diff" = "SMA20_diff",
"Price_diff" = "Price_diff",
"ATR_diff" = "ATR_diff"), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')) # Data as datatable
)
)
))
# SERVER
server <- function(input, output) {
# Regression output
output$summary <- renderPrint({
fit <- lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(compositeAugust, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(compositeAugust[,input$indepvar], compositeAugust[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(compositeAugust[,input$outcome] ~ compositeAugust[,input$indepvar]), col="red")
lines(lowess(compositeAugust[,input$indepvar],compositeAugust[,input$outcome]), col="blue")
}, height=400)
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(compositeAugust[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(compositeAugust[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
}
>>>>>>> e0fbe0dcf34c6a351497429bc610aa7aa26fdf02
shinyApp(ui = ui, server = server)
